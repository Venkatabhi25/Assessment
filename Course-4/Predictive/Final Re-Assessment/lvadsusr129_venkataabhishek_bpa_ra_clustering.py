# -*- coding: utf-8 -*-
"""LVADSUSR129_VENKATAABHISHEK_BPA_RA_CLUSTERING

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15OKFEByzGGUr83G5cgG6j9CtI0B6u42p
"""

# Commented out IPython magic to ensure Python compatibility.
import warnings
warnings.filterwarnings("ignore")
from sklearn.cluster import KMeans
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from matplotlib import pyplot as plt
import seaborn as sns
# %matplotlib inline

import pandas as pd
df=pd.read_csv('/content/customer_segmentation.csv')
df.head()

df.describe()

df.info()

df.isnull().sum()
#here there are 24 null values in Income

df.drop_duplicates()

df=df.fillna(method='ffill')
df.isnull().sum()
#filling null values using forwad fill method in fillna

numerical_cols = [col for col in df.columns if df[col].dtype != 'object']
fig = plt.figure(figsize=(12, 6))
fig,axes=plt.subplots(ncols=2, nrows=int(len(df.columns)/2),figsize=(20,20))

for i,ax in zip(range(len(df.columns)), axes.flat):
  if i<len(numerical_cols):
    sns.boxplot(df[numerical_cols[i]],ax=ax)
fig.tight_layout()
fig.suptitle('Outliers in numerical features')
fig.show()

df = df.drop(['Dt_Customer', 'ID'], axis = 1)


cat_col = [col for col in df.columns if df[col].dtype == 'object']
cat_col

encoder = LabelEncoder()
df['Education'] = encoder.fit_transform(df['Education'])
df['Marital_Status'] = encoder.fit_transform(df['Marital_Status'])
df.head()

minmax = MinMaxScaler()

for i in df.columns:
  minmax.fit(df[[i]])
  df[i] = minmax.transform(df[[i]])

df.head()

#to find the K value we use Elbow method here we got K=5
sse = []
k_range = range(1,10)
for k in k_range:
   km = KMeans(n_clusters=k)
   km.fit(df)
   sse.append(km.inertia_)

plt.xlabel('K')
plt.ylabel('Sum of squared error')
plt.plot(k_range,sse)

km = KMeans(n_clusters=5)
y_predicted = km.fit_predict(df)
y_predicted
df['cluster']=y_predicted
print(km.cluster_centers_)

df1 = df[df.cluster==0]
df2 = df[df.cluster==1]
df3 = df[df.cluster==2]
df4 = df[df.cluster==3]
df5 = df[df.cluster==4]
plt.scatter(df1.cluster,df1['Income'],color='green')
plt.scatter(df2.cluster,df2['Income'],color='red')
plt.scatter(df3.cluster,df3['Income'],color='black')
plt.scatter(df4.cluster,df4['Income'],color='yellow')
plt.scatter(df5.cluster,df5['Income'],color='blue')
plt.scatter(km.cluster_centers_[:,0],km.cluster_centers_[:,1],color='purple',marker='*',label='centroid')
plt.xlabel('Cluster')
plt.ylabel('Area')
plt.legend()

'''
INSIGHTS
Here by clustering the customers into 5 clusters based on their purchase behaviours,frequency of visits and preferences
In the above Scatter plot all the clusters along with their centroids are plotted
We haven't removed outliers because some times we may miss important data
Based on the plot Cluster 1(the one in red color) has outliers in it by that we can say the customers in cluster 1
has different purchase behaviours than other clusters
'''