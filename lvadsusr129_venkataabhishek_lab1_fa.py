# -*- coding: utf-8 -*-
"""LVADSUSR129_VenkataAbhishek_LAB1_FA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19F-3WWNvhTakmQNLdG1L-JgzrohGfNnh
"""

import numpy as np
import pandas as pd
import warnings
warnings.filterwarnings("ignore")
import seaborn as sns

df=pd.read_csv('/content/loan_approval.csv')
df.head()

df.describe()

df.info()

df.isnull().sum()

duplicate_rows = df.duplicated()
print(df[duplicate_rows])

df.drop_duplicates()
df.duplicated()

df.shape

sns.boxplot(df)

from scipy.stats import zscore
numeric_df = df.select_dtypes(include=[np.number])
z_scores = zscore(numeric_df)
abs_z_scores = np.abs(z_scores)
filtered_entries = (abs_z_scores < 3).all(axis=1)
df_cleaned = df[filtered_entries]
df_cleaned.head()

print("Original DataFrame:")
print(df.shape)
print("\nDataFrame after removing outliers:")
print(df_cleaned.shape)

df_cleaned.corr()

sns.heatmap(df_cleaned.corr(),annot=True)

sns.boxplot(df_cleaned)

import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder, MinMaxScaler, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, accuracy_score, confusion_matrix, recall_score, f1_score, precision_score
import warnings
warnings.filterwarnings("ignore")

le=LabelEncoder()
df[' education']=le.fit_transform(df[' education'])
df[' self_employed']=le.fit_transform(df[' self_employed'])
df[' loan_status']=le.fit_transform(df[' loan_status'])
df.head()

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
X = df.drop(' loan_status', axis=1)
y = df[' loan_status']
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3)
model = LogisticRegression()
model = model.fit(X_train,y_train)
pred = model.predict(X_test)
pred

acc = accuracy_score(pred,y_test)
print(f'Accuracy : {acc}')

cm = confusion_matrix(pred,y_test)
print(f'CM : {cm}')

plt.plot([y_test.min(), y_test.max()],[y_test.min(), y_test.max()], c='red')
plt.scatter(y_test,pred, c='blue')
plt.xlabel('Actual')
plt.ylabel('Predicted')
plt.title('Actual vs Predicted')